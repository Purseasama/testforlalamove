import streamlit as st
import pandas as pd
import requests
import time
import hmac
import hashlib
import uuid
import json
import re
from urllib.parse import urlparse

# ============================================
# CONFIGURATION - EDIT THESE
# ============================================

# Lalamove credentials (get from https://developers.lalamove.com)
LALAMOVE_API_KEY = st.secrets.get("LALAMOVE_API_KEY", "YOUR_API_KEY_HERE")
LALAMOVE_API_SECRET = st.secrets.get("LALAMOVE_API_SECRET", "YOUR_API_SECRET_HERE")
LALAMOVE_COUNTRY = "TH"
LALAMOVE_MARKET  = "TH-BKK" 
LALAMOVE_BASE_URL = "https://rest.sandbox.lalamove.com"  # Use sandbox for testing

# Your shop details
SHOP_NAME = "Sugar Shade"
SHOP_ADDR = "‡πÄ‡∏ó‡∏≠‡∏î‡πÑ‡∏ó 77, ‡∏Å‡∏£‡∏∏‡∏á‡πÄ‡∏ó‡∏û‡∏°‡∏´‡∏≤‡∏ô‡∏Ñ‡∏£"
SHOP_LAT = 13.709679
SHOP_LNG = 100.441462

# ============================================
# FUNCTIONS
# ============================================

# OpenStreetMap Geocoding (FREE - No API key needed!)
def geocode_address_nominatim(address):
    """Convert address to lat/lng using free OpenStreetMap Nominatim"""
    url = "https://nominatim.openstreetmap.org/search"
    params = {
        "q": address,
        "format": "json",
        "limit": 5,
        "countrycodes": "th",
        "addressdetails": 1
    }
    headers = {
        "User-Agent": "SugarShade-Delivery-Test-App"
    }
    
    try:
        response = requests.get(url, params=params, headers=headers, timeout=10)
        response.raise_for_status()
        data = response.json()
        
        if len(data) > 0:
            results = []
            for item in data:
                results.append({
                    "lat": float(item["lat"]),
                    "lng": float(item["lon"]),
                    "address": item["display_name"],
                    "name": item.get("name", "")
                })
            return {"success": True, "results": results}
        else:
            return {"success": False, "error": "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà"}
    except Exception as e:
        return {"success": False, "error": str(e)}

# Parse coordinates from text
def parse_coords_from_text(text: str):
    if not text:
        return (None, None)
    m = re.search(r"(-?\d+\.\d+)\s*,\s*(-?\d+\.\d+)", text)
    return (float(m.group(1)), float(m.group(2))) if m else (None, None)

# Lalamove API functions
def _now_ms():
    return str(int(time.time() * 1000))

def _build_signature(secret, method, url, body, ts_ms):
    parsed = urlparse(url)
    path = parsed.path
    payload = json.dumps(body, separators=(",", ":")) if body else ""
    to_sign = f"{ts_ms}\r\n{method.upper()}\r\n{path}\r\n\r\n{payload}"
    return hmac.new(secret.encode("utf-8"), to_sign.encode("utf-8"), hashlib.sha256).hexdigest()

def _headers(method, url, body):
    ts = _now_ms()
    sig = _build_signature(LALAMOVE_API_SECRET, method, url, body, ts)
    return {
        "Content-Type": "application/json; charset=UTF-8",
        "Accept": "application/json",
        "X-Request-ID": str(uuid.uuid4()),
        # Keep country if you like (harmless), but MARKET is the key to fix the 422.
        "X-LLM-Country": LALAMOVE_COUNTRY,
        "X-LLM-Market": LALAMOVE_MARKET,  # <-- add this line
        "Authorization": f"hmac {LALAMOVE_API_KEY}:{ts}:{sig}",
    }

def lalamove_request(method, path, body=None):
    url = f"{LALAMOVE_BASE_URL}{path}"
    resp = requests.request(method, url, headers=_headers(method, url, body),
                            data=json.dumps(body) if body else None, timeout=30)
    try:
        data = resp.json()
    except Exception:
        resp.raise_for_status()
        return None
    if not resp.ok:
        raise RuntimeError(json.dumps({"status": resp.status_code, "error": data}, ensure_ascii=False))
    return data

def lalamove_get_quotation(stops, service_type):
    payload = {
        "serviceType": service_type,
        "stops": stops,
    }
    return lalamove_request("POST", "/v3/quotations", payload)

# ============================================
# STREAMLIT APP
# ============================================

st.set_page_config(page_title="Lalamove Test", page_icon="üöö", layout="wide")

st.title("üöö Lalamove + OpenStreetMap Test")
st.write("‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏£‡∏∞‡∏ö‡∏ö‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡∏∞‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ñ‡πà‡∏≤‡∏™‡πà‡∏á")

# Show configuration status
with st.expander("‚öôÔ∏è ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤"):
    if LALAMOVE_API_KEY == "YOUR_API_KEY_HERE":
        st.error("‚ùå ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÉ‡∏™‡πà Lalamove API Key")
    else:
        st.success(f"‚úÖ API Key: {LALAMOVE_API_KEY[:10]}...")
    
    if LALAMOVE_API_SECRET == "YOUR_API_SECRET_HERE":
        st.error("‚ùå ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÉ‡∏™‡πà Lalamove API Secret")
    else:
        st.success(f"‚úÖ API Secret: {LALAMOVE_API_SECRET[:10]}...")
    
    st.info(f"üè™ ‡∏£‡πâ‡∏≤‡∏ô: {SHOP_NAME}")
    st.info(f"üìç ‡∏û‡∏¥‡∏Å‡∏±‡∏î‡∏£‡πâ‡∏≤‡∏ô: {SHOP_LAT}, {SHOP_LNG}")
    st.info(f"üåê Lalamove URL: {LALAMOVE_BASE_URL}")

st.divider()

# ============================================
# SECTION 1: ADDRESS SEARCH TEST
# ============================================

st.header("1Ô∏è‚É£ ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà (OpenStreetMap)")

search_method = st.radio(
    "‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ß‡∏¥‡∏ò‡∏µ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤:",
    ["üó∫Ô∏è ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà (‡∏ü‡∏£‡∏µ)", "üéØ ‡πÉ‡∏™‡πà‡∏û‡∏¥‡∏Å‡∏±‡∏î‡πÄ‡∏≠‡∏á"],
    horizontal=True
)

if search_method == "üó∫Ô∏è ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà (‡∏ü‡∏£‡∏µ)":
    search_address = st.text_input(
        "‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà",
        placeholder="‡πÄ‡∏ä‡πà‡∏ô ‡∏™‡∏¢‡∏≤‡∏°‡∏û‡∏≤‡∏£‡∏≤‡∏Å‡∏≠‡∏ô ‡∏Å‡∏£‡∏∏‡∏á‡πÄ‡∏ó‡∏û, MBK Center, ‡πÄ‡∏ã‡πá‡∏ô‡∏ó‡∏£‡∏±‡∏•‡πÄ‡∏ß‡∏¥‡∏•‡∏î‡πå",
        help="‡∏û‡∏¥‡∏°‡∏û‡πå‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏´‡∏£‡∏∑‡∏≠‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà"
    )
    
    if search_address and len(search_address) > 3:
        if st.button("üîç ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤", type="primary"):
            with st.spinner("üîç ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤..."):
                time.sleep(1)  # Rate limiting
                geocode_result = geocode_address_nominatim(search_address)
            
            if geocode_result["success"]:
                st.success(f"‚úÖ ‡∏û‡∏ö {len(geocode_result['results'])} ‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå")
                
                # Show results
                result_options = []
                for i, result in enumerate(geocode_result["results"]):
                    display_text = result['address']
                    if result.get('name'):
                        display_text = f"{result['name']} - {result['address']}"
                    result_options.append(display_text)
                
                selected_index = st.radio(
                    "‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á:",
                    range(len(result_options)),
                    format_func=lambda x: result_options[x]
                )
                
                # Store selected location
                selected_result = geocode_result["results"][selected_index]
                st.session_state.selected_location = {
                    "lat": selected_result["lat"],
                    "lng": selected_result["lng"],
                    "address": selected_result["address"]
                }
                
                # Show map
                st.map(pd.DataFrame({
                    'lat': [SHOP_LAT, selected_result["lat"]],
                    'lon': [SHOP_LNG, selected_result["lng"]]
                }))
                
                col1, col2 = st.columns(2)
                with col1:
                    st.metric("üè™ ‡∏à‡∏∏‡∏î‡∏£‡∏±‡∏ö (‡∏£‡πâ‡∏≤‡∏ô)", f"{SHOP_LAT:.6f}, {SHOP_LNG:.6f}")
                with col2:
                    st.metric("üìç ‡∏à‡∏∏‡∏î‡∏™‡πà‡∏á", f"{selected_result['lat']:.6f}, {selected_result['lng']:.6f}")
                
            else:
                st.error(f"‚ùå {geocode_result['error']}")
                st.info("üí° ‡∏•‡∏≠‡∏á‡πÉ‡∏™‡πà‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏´‡πâ‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏Ç‡∏∂‡πâ‡∏ô ‡πÄ‡∏ä‡πà‡∏ô ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ä‡∏∑‡πà‡∏≠‡∏ñ‡∏ô‡∏ô, ‡πÅ‡∏Ç‡∏ß‡∏á, ‡πÄ‡∏Ç‡∏ï")

elif search_method == "üéØ ‡πÉ‡∏™‡πà‡∏û‡∏¥‡∏Å‡∏±‡∏î‡πÄ‡∏≠‡∏á":
    st.info("üí° ‡∏ß‡∏¥‡∏ò‡∏µ‡∏´‡∏≤‡∏û‡∏¥‡∏Å‡∏±‡∏î: ‡πÄ‡∏õ‡∏¥‡∏î Google Maps ‚Üí ‡∏Ñ‡∏•‡∏¥‡∏Å‡∏Ç‡∏ß‡∏≤‡∏ó‡∏µ‡πà‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á ‚Üí ‡∏Ñ‡∏±‡∏î‡∏•‡∏≠‡∏Å‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç")
    manual_coords = st.text_input(
        "‡∏û‡∏¥‡∏Å‡∏±‡∏î (latitude, longitude)",
        placeholder="13.756331, 100.501762"
    )
    
    if manual_coords:
        parsed_lat, parsed_lng = parse_coords_from_text(manual_coords)
        if parsed_lat and parsed_lng:
            st.session_state.selected_location = {
                "lat": parsed_lat,
                "lng": parsed_lng,
                "address": f"‡∏û‡∏¥‡∏Å‡∏±‡∏î: {parsed_lat}, {parsed_lng}"
            }
            st.success("‚úÖ ‡∏û‡∏¥‡∏Å‡∏±‡∏î‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á")
            st.map(pd.DataFrame({
                'lat': [SHOP_LAT, parsed_lat],
                'lon': [SHOP_LNG, parsed_lng]
            }))
        else:
            st.error("‚ùå ‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏û‡∏¥‡∏Å‡∏±‡∏î‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á ‡πÉ‡∏™‡πà‡πÄ‡∏õ‡πá‡∏ô latitude, longitude")

st.divider()

# ============================================
# SECTION 2: LALAMOVE QUOTATION TEST
# ============================================

st.header("2Ô∏è‚É£ ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ñ‡πà‡∏≤‡∏™‡πà‡∏á Lalamove")

if "selected_location" in st.session_state:
    st.success("‚úÖ ‡∏°‡∏µ‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡∏õ‡∏•‡∏≤‡∏¢‡∏ó‡∏≤‡∏á‡πÅ‡∏•‡πâ‡∏ß")
    st.write(f"üìç **‡∏õ‡∏•‡∏≤‡∏¢‡∏ó‡∏≤‡∏á:** {st.session_state.selected_location['address'][:100]}")
    
    # Select vehicle type
    service_type = st.selectbox(
        "‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏£‡∏ñ:",
        ["MOTORCYCLE", "CAR", "VAN", "TRUCK"]
    )
    
    if st.button("üí∞ ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ñ‡πà‡∏≤‡∏™‡πà‡∏á", type="primary", use_container_width=True):
        if LALAMOVE_API_KEY == "YOUR_API_KEY_HERE" or LALAMOVE_API_SECRET == "YOUR_API_SECRET_HERE":
            st.error("‚ùå ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÉ‡∏™‡πà Lalamove API credentials ‡∏Å‡πà‡∏≠‡∏ô")
        else:
            location = st.session_state.selected_location
            
            try:
                # Prepare stops
                stops = [
                    {
                        "location": {"lat": str(SHOP_LAT), "lng": str(SHOP_LNG)},
                        "addresses": {
                            "th_TH": {
                                "displayString": SHOP_ADDR,
                                "country": "TH"
                            }
                        }
                    },
                    {
                        "location": {"lat": str(location["lat"]), "lng": str(location["lng"])},
                        "addresses": {
                            "th_TH": {
                                "displayString": location["address"][:100],
                                "country": "TH"
                            }
                        }
                    }
                ]
                
                # Get quotation
                with st.spinner("‚è≥ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ñ‡πà‡∏≤‡∏Ç‡∏ô‡∏™‡πà‡∏á..."):
                    quote_result = lalamove_get_quotation(stops, service_type)
                
                if quote_result and "priceBreakdown" in quote_result:
                    st.success("‚úÖ ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ñ‡πà‡∏≤‡∏Ç‡∏ô‡∏™‡πà‡∏á‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!")
                    
                    # Display metrics
                    col1, col2, col3 = st.columns(3)
                    
                    with col1:
                        total_fee = quote_result.get("priceBreakdown", {}).get("total", "N/A")
                        st.metric("üíµ ‡∏Ñ‡πà‡∏≤‡∏™‡πà‡∏á‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î", f"‡∏ø{total_fee}")
                    
                    with col2:
                        distance = quote_result.get("distance", {}).get("value", "N/A")
                        st.metric("üìè ‡∏£‡∏∞‡∏¢‡∏∞‡∏ó‡∏≤‡∏á", f"{distance} ‡∏Å‡∏°.")
                    
                    with col3:
                        base_fee = quote_result.get("priceBreakdown", {}).get("base", "N/A")
                        st.metric("üí∞ ‡∏Ñ‡πà‡∏≤‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô", f"‡∏ø{base_fee}")
                    
                    # Show detailed breakdown
                    with st.expander("üìä ‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î"):
                        st.json(quote_result)
                    
                    st.info(f"üöó ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏£‡∏ñ: {service_type}")
                    st.warning("‚ö†Ô∏è ‡∏Ñ‡πà‡∏≤‡∏Ç‡∏ô‡∏™‡πà‡∏á‡∏ô‡∏µ‡πâ‡πÄ‡∏õ‡πá‡∏ô‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡πÄ‡∏ö‡∏∑‡πâ‡∏≠‡∏á‡∏ï‡πâ‡∏ô ‡∏£‡∏≤‡∏Ñ‡∏≤‡∏à‡∏£‡∏¥‡∏á‡∏≠‡∏≤‡∏à‡πÅ‡∏ï‡∏Å‡∏ï‡πà‡∏≤‡∏á‡∏Ç‡∏∂‡πâ‡∏ô‡∏Å‡∏±‡∏ö‡∏™‡∏†‡∏≤‡∏û‡∏à‡∏£‡∏≤‡∏à‡∏£")
                    
                else:
                    st.error("‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ñ‡πà‡∏≤‡∏Ç‡∏ô‡∏™‡πà‡∏á‡πÑ‡∏î‡πâ")
                    if quote_result:
                        with st.expander("‡∏î‡∏π‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î Error"):
                            st.json(quote_result)
                
            except Exception as e:
                st.error(f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {str(e)}")
                st.info("üí° ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ API credentials ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà")

else:
    st.warning("‚ö†Ô∏è ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÅ‡∏•‡∏∞‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡∏õ‡∏•‡∏≤‡∏¢‡∏ó‡∏≤‡∏á‡∏Å‡πà‡∏≠‡∏ô (‡πÉ‡∏ô‡∏™‡πà‡∏ß‡∏ô 1)")

st.divider()

# ============================================
# HELP SECTION
# ============================================

with st.expander("‚ùì ‡∏ß‡∏¥‡∏ò‡∏µ‡πÉ‡∏ä‡πâ"):
    st.markdown("""
    ### üìù ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö:
    
    **1. ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ Lalamove API:**
    - ‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏ó‡∏µ‡πà https://developers.lalamove.com
    - ‡∏™‡∏£‡πâ‡∏≤‡∏á Application (‡πÄ‡∏•‡∏∑‡∏≠‡∏Å Sandbox ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ó‡∏î‡∏™‡∏≠‡∏ö)
    - ‡πÑ‡∏î‡πâ API Key ‡πÅ‡∏•‡∏∞ Secret
    - ‡πÉ‡∏™‡πà‡πÉ‡∏ô `.streamlit/secrets.toml`:
    ```toml
    LALAMOVE_API_KEY = "pk_test_xxxxx"
    LALAMOVE_API_SECRET = "sk_test_xxxxx"
    ```
    
    **2. ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà:**
    - ‡∏û‡∏¥‡∏°‡∏û‡πå‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà ‡πÄ‡∏ä‡πà‡∏ô "‡∏™‡∏¢‡∏≤‡∏°‡∏û‡∏≤‡∏£‡∏≤‡∏Å‡∏≠‡∏ô ‡∏Å‡∏£‡∏∏‡∏á‡πÄ‡∏ó‡∏û"
    - ‡∏Ñ‡∏•‡∏¥‡∏Å "üîç ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤"
    - ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
    
    **3. ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ñ‡πà‡∏≤‡∏™‡πà‡∏á:**
    - ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏£‡∏ñ
    - ‡∏Ñ‡∏•‡∏¥‡∏Å "üí∞ ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ñ‡πà‡∏≤‡∏™‡πà‡∏á"
    - ‡∏î‡∏π‡∏£‡∏≤‡∏Ñ‡∏≤‡πÅ‡∏•‡∏∞‡∏£‡∏∞‡∏¢‡∏∞‡∏ó‡∏≤‡∏á
    
    ### ‚úÖ ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à:
    - ‡∏Ñ‡∏±‡∏î‡∏•‡∏≠‡∏Å‡πÇ‡∏Ñ‡πâ‡∏î‡πÑ‡∏õ‡πÉ‡∏™‡πà‡πÉ‡∏ô‡πÅ‡∏≠‡∏õ‡∏´‡∏•‡∏±‡∏Å‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì
    - ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏à‡∏≤‡∏Å Sandbox ‡πÄ‡∏õ‡πá‡∏ô Production URL ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏û‡∏£‡πâ‡∏≠‡∏°
    """)

with st.expander("üîß Troubleshooting"):
    st.markdown("""
    **‡∏ñ‡πâ‡∏≤‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡πÑ‡∏°‡πà‡∏û‡∏ö:**
    - ‡πÉ‡∏™‡πà‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡πÉ‡∏´‡πâ‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏Ç‡∏∂‡πâ‡∏ô
    - ‡πÄ‡∏û‡∏¥‡πà‡∏° "‡∏Å‡∏£‡∏∏‡∏á‡πÄ‡∏ó‡∏û" ‡∏´‡∏£‡∏∑‡∏≠‡∏ä‡∏∑‡πà‡∏≠‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î
    - ‡∏•‡∏≠‡∏á‡πÉ‡∏ä‡πâ‡∏†‡∏≤‡∏©‡∏≤‡∏≠‡∏±‡∏á‡∏Å‡∏§‡∏© ‡πÄ‡∏ä‡πà‡∏ô "Siam Paragon Bangkok"
    
    **‡∏ñ‡πâ‡∏≤ Lalamove ‡πÑ‡∏°‡πà‡∏ó‡∏≥‡∏á‡∏≤‡∏ô:**
    - ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÉ‡∏™‡πà API Key ‡πÅ‡∏•‡∏∞ Secret ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
    - ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÉ‡∏ä‡πâ Sandbox URL ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    - ‡∏î‡∏π Error message ‡πÉ‡∏ô "‡∏î‡∏π‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î Error"
    
    **Rate Limiting:**
    - OpenStreetMap: ‡πÑ‡∏°‡πà‡πÄ‡∏Å‡∏¥‡∏ô 1 request ‡∏ï‡πà‡∏≠‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ (‡∏°‡∏µ delay ‡πÉ‡∏ô‡πÇ‡∏Ñ‡πâ‡∏î‡πÅ‡∏•‡πâ‡∏ß)
    - Lalamove Sandbox: ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö limit ‡πÉ‡∏ô‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£ API
    """)
